apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'application'
apply plugin: 'maven'

sourceCompatibility = 1.7
group = 'com.msgilligan'
version = '0.2'

repositories {
    jcenter()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/'}
}

configurations {
    // jansi configuration is a workaround for a broken transitive dependency
    // See: http://forums.gradle.org/gradle/topics/gradle_task_groovydoc_failing_with_noclassdeffounderror
    jansi.extendsFrom(runtime)
    robovm
}

dependencies {
    compile 'com.fasterxml.jackson.core:jackson-core:2.3.2'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.3.3'
    compile 'commons-cli:commons-cli:1.2'

    robovm  'org.codehaus.groovy:groovy:2.4.0-rc-2:grooid'

    compile 'org.codehaus.groovy:groovy:2.4.0-rc-2'
    compile 'org.codehaus.groovy:groovy-json:2.4.0-rc-2'
    compile 'org.codehaus.groovy:groovy-sql:2.4.0-rc-2'
    compile 'org.codehaus.groovy:groovy-ant:2.4.0-rc-2'   // used in Groovy doc
    compile 'com.google:bitcoinj:0.11.3'
    compile 'org.postgresql:postgresql:9.3-1102-jdbc41'
    compile 'com.xlson.groovycsv:groovycsv:1.0'

    jansi 'org.fusesource.jansi:jansi:1.11'

    testCompile("org.spockframework:spock-core:1.0-groovy-2.3-SNAPSHOT") {
        exclude module: "groovy-all"
    }
}

//compileJava {
//    options.compilerArgs << '-Xlint:unchecked'
//}

mainClassName = "com.msgilligan.bitcoin.cli.Status"
def roboExeName = "btcstatus"

jar {
    manifest {
        attributes 'Implementation-Title': 'BTC/MSC Status', 'Implementation-Version': version, 'Consensus-Class': mainClassName
    }
}

test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
}

def homePath = System.properties['user.home']
def roboVMHome = "${homePath}/robovm-0.0.14"
def roboLibPath = "robolib"

task copyToRoboLib(type: Copy) {
    into roboLibPath
    from configurations.runtime
}

task roboCompile(type:Exec, dependsOn: [classes, copyToRoboLib]) {
    executable "${roboVMHome}/bin/robovm"
    args '-verbose', '-debug',
            '-cp', "build/classes/main:${roboLibPath}/commons-cli-1.2.jar:${roboLibPath}/jackson-core-2.3.3.jar:${roboLibPath}/jackson-databind-2.3.3.jar:${roboLibPath}/jackson-annotations-2.3.0.jar",
            '-d', 'build',
            '-forcelinkclasses', 'com.android.okhttp.HttpHandler:com.android.org.conscrypt.OpenSSLSocketFactoryImpl',

            '-o', "${roboExeName}",
            "${mainClassName}"
}

task roboRun(type:Exec, dependsOn: roboCompile) {
    executable "build/${roboExeName}"
    args '-rvm:log=debug'
}

// Test Structure
sourceSets {
    integrationTest {
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + sourceSets.main.output + configurations.testRuntime
        java {
            srcDir 'src/integ/java'
        }
        groovy {
            srcDir 'src/integ/groovy'
        }
        resources {
            srcDir 'src/integ/resources'
        }
    }
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    testLogging.showStandardStreams = true
}

task regTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    testLogging.showStandardStreams = true

    systemProperty 'regtest', true
//    include 'org/mastercoin/test/rpc/**', 'com/msgilligan/bitcoin/rpc/**', 'com/msgilligan/bitcoinj/**'
    include 'foundation/omni/test/rpc/**', 'com/msgilligan/bitcoin/rpc/**'
}

task regTestBTC(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    testLogging.showStandardStreams = true

    systemProperty 'regtest', true
    include 'com/msgilligan/bitcoin/rpc/**'
}

task consensusTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    testLogging.showStandardStreams = true

    systemProperty 'regtest', false
    include 'foundation/omni/test/consensus/**'
}

groovydoc {
    // Create GroovyDoc for Groovy + Java classes
    source = sourceSets.main.groovy + sourceSets.main.java
    overview = "src/main/java/overview.html"
    groovyClasspath = project.configurations.jansi
}

def currencyID = 1

task getMasterConsensus(dependsOn: 'classes',  type: JavaExec) {
    main = 'foundation.omni.MasterCoreConsensusTool'
    args = [currencyID, 'build/mastercore_consensus.txt']
    classpath = sourceSets.main.runtimeClasspath
}

task getOmniConsensus(dependsOn: 'classes',  type: JavaExec) {
    main = 'foundation.omni.OmniwalletConsensusTool'
    args = [currencyID, 'build/omniwallet_consensus.txt']
    classpath = sourceSets.main.runtimeClasspath
}

task getChestConsensus(dependsOn: 'classes',  type: JavaExec) {
    main = 'foundation.omni.ChestConsensusTool'
    args = [currencyID, 'build/chest_consensus.txt']
    classpath = sourceSets.main.runtimeClasspath
}

task getConsensus(dependsOn: ['getMasterConsensus', 'getOmniConsensus', 'getChestConsensus']) << {
    println "Consensus files are in build/*_consensus.txt"
}
